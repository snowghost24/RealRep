export const validationRules = {
    composedValidators: ( ...validators ) => ( value ) => validators.reduce( ( acc, cur ) => acc || cur( value ), undefined ),
    address: ( value ) => ( value && /[^A-Za-z0-9'\.\-\s\,\#]/i.test( value ) ? 'Only alphanumeric characters, commas, dash & #' : undefined ),
    alpha: ( value ) => ( value && /[^a-zA-Z\-]/i.test( value ) ? 'Only alphanumeric characters' : undefined ),
    alphaNumeric: ( value ) => ( value && /[^a-zA-Z0-9 -]/i.test( value ) ? 'Only alphanumeric characters' : undefined ),
    alphaNumericPlus: ( value ) => ( value && /[^a-zA-Z0-9-]/i.test( value ) ? 'Only alphanumeric characters, hyphens, no spaces' : undefined ),
    array: ( value ) => ( value && Array.isArray( value ) && value.length ? undefined : 'Required' ),
    boolean: ( value ) => ( value !== 'undefined' ? undefined : 'Required' ),
    isEmailValid: ( value ) => ( value && !/^\w+([.-]?\w+)*@\w+([.-]?\w+)*(\.\w{2,3})+$/.test( value ) ? 'Invalid email address' : undefined ),
    maxLength: ( max ) => ( value ) => ( value && value.length > max ? `Must be ${ max } characters or less` : undefined ),
    maxValue: ( max ) => ( value ) => ( value && value > max ? `Must be at most ${ max }` : undefined ),
    minLength: ( min ) => ( value ) => ( value && value.length < min ? `Must be ${ min } characters or more` : undefined ),
    minValue: ( min ) => ( value ) => ( value && value < min ? `Must be at least ${ min }` : undefined ),
    number: ( value ) => ( value && isNaN( Number( value ) ) ? 'Must be a number' : undefined ),
    phoneNumberUS: ( value ) => ( value && !/^(0|[1-9][0-9]{9})$/i.test( value ) ? 'Invalid phone number' : undefined ),
    phoneNumber: ( value ) => ( value && !/^[0-9\-\(\)\/\+\s]*$/i.test( value ) ? 'Invalid phone number' : undefined ),
    required: ( value ) => ( value && ( value.length || value !== 'undefined' ) ? undefined : 'Required' ),
    safeVarChars: ( value ) => ( value && /[^A-Za-z0-9'\.\-\_\s\,\#\@\!]/gmi.test( value ) ? 'Only alphanumeric characters, underscore, commas, dash & #' : undefined ),
    validURL: ( value ) => ( value && !/[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)?/gi.test( value ) ? 'invalid URL' : undefined ),
};
